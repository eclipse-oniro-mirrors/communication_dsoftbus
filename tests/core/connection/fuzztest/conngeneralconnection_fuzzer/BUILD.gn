# Copyright (c) 2025 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/test.gni")
import("../../../../../dsoftbus.gni")

##############################fuzztest##########################################

ohos_fuzztest("ConnGeneralConnectionFuzzTest") {
  module_out_path = dsoftbus_fuzz_out_path
  fuzz_config_file = "$dsoftbus_root_path/tests/core/connection/fuzztest/conngeneralconnection_fuzzer"

  include_dirs = [
    "$dsoftbus_root_path/core/connection/general",
    "$dsoftbus_root_path/core/connection/interface",
    "$dsoftbus_root_path/core/common/include",
    "$dsoftbus_root_path/interfaces/kits/common",
    "$dsoftbus_root_path/dfx/interface/include",
    "$dsoftbus_root_path/adapter/common/include",
    "$dsoftbus_root_path/adapter/common/net/bluetooth/include",
    "$dsoftbus_root_path/core/connection/ble/include",
    "$dsoftbus_root_path/core/connection/manager",
    "$dsoftbus_root_path/core/bus_center/interface",
    "$dsoftbus_root_path/interfaces/kits/bus_center",
    "$dsoftbus_root_path/core/discovery/manager/include",
    "$dsoftbus_root_path/core/discovery/interface",
    "$dsoftbus_root_path/core/connection/ipc/include",
    "$dsoftbus_root_path/interfaces/kits/connection",
    "$dsoftbus_root_path/core/connection/br/include",
    "$dsoftbus_root_path/core/adapter/br/include",
    "$dsoftbus_root_path/core/connection/tcp/include",
    "$dsoftbus_root_path/core/connection/sle/include",
    "$dsoftbus_root_path/core/frame/init/include",
    "$dsoftbus_root_path/adapter/common/include",
    "$dsoftbus_root_path/core/connection/proxy",
    "$dsoftbus_root_path/tests/common/include",
  ]

  sources = [
    "$dsoftbus_root_path/core/connection/general/softbus_conn_general_connection.c",
    "$dsoftbus_root_path/core/connection/general/softbus_conn_general_negotiation.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_ipc.c",
    "$dsoftbus_root_path/core/connection/manager/softbus_conn_manager.c",
    "$dsoftbus_root_path/tests/core/connection//general/softbus_conn_general_connection_test.cpp",
    "$dsoftbus_root_path/tests/core/connection/general/general_connection_mock.cpp",
    "conngeneralconnection_fuzzer.cpp",
  ]

  remove_configs = [
    "//build/config/compiler:no_rtti",
    "//build/config/compiler:no_exceptions",
  ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
    "-fexceptions",
    "-frtti",
  ]

  configs = [
    "//build/config/compiler:rtti",
    "//build/config/compiler:exceptions",
  ]

  deps = [
    "$dsoftbus_root_path/adapter:softbus_adapter",
    "$dsoftbus_root_path/core/common:softbus_utils",
    "$dsoftbus_root_path/core/frame:softbus_server",
    "$dsoftbus_root_path/dfx:softbus_dfx",
  ]

  if (dsoftbus_feature_conn_br) {
    sources += [ "$dsoftbus_root_path/adapter/common/net/bluetooth/common/softbus_adapter_bt_common.c" ]
  } else {
    sources += [ "$dsoftbus_root_path/adapter/common/net/bluetooth/common/softbus_adapter_bt_common_virtual.c" ]
  }

  external_deps = [
    "bluetooth:btframework",
    "bounds_checking_function:libsec_shared",
    "cJSON:cjson",
    "c_utils:utils",
    "googletest:gmock_rtti",
    "googletest:gtest_rtti",
    "hilog:libhilog",
    "hitrace:libhitracechain",
    "init:libbegetutil",
  ]
}
